# -*- coding: utf-8 -*-
"""Deteksi Jantung Xgboost

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rohzhR08OBtGCJUNJxqFGg_X4fbjtmf-
"""

import pandas as pd

dataset = pd.read_csv('drive/MyDrive/Dataset/ECG/EKG.csv')
dataset.head(10000)

# Import library yang dibutuhkan
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np
import matplotlib.pyplot as plt
from xgboost.sklearn import XGBClassifier

df = pd.read_csv("drive/MyDrive/Dataset/ECG/EKG.csv",header=None)
names = ['t1','t2','t3','t4','t5','t6','t7','t8','t9','t10','t11','t12','t13','t14','t15','t16','t17','t18','t19','t20','t21','t22','t23','t24','t25','t26','t27','t28','t29','t30','t31','t32','t33','t34','t35','t36','t37','t38','t39','t40','t41','t42','t43','t44','t45','t46','t47','t48','t49','t50','t51','t52','t53','t54','t55','t56','t57','t58','t59','t60','t61','t62','t63','t64','t65','t66','t67','t68','t69','t70','t71','t72','t73','t74','t75','t76','t77','t78','t79','t80','t81','t82','t83','t84','t85','t86','t87','t88','t89','t90','t91','t92','t93','t94','t95','t96','t97','t98','t99','t100','t101','t102','t103','t104','t105','t106','t107','t108','t109','t110','t111','t112','t113','t114','t115','t116','t117','t118','t119','t120','t121','t122','t123','t124','t125','t126','t127','t128','t129','t130','t131','t132','t133','t134','t135','t136','t137','t138','t139','t140','t141','t142','t143','t144','t145','t146','t147','t148','t149','t150','t151','t152','t153','t154','t155','t156','t157','t158','t159','t160','t161','t162','t163','t164','t165','t166','t167','t168','t169','t170','t171','t172','t173','t174','t175','t176','t177','t178','t179','t180','t181','t182','t183','t184','t185','t186','t187'
, 'class']

df.columns = names
print(df.head(2))
print(df.info())
print(df.describe())

df.isnull().sum()

def label_encode(df):
    df_labelled = df.copy()
    # Dictionary to input the different numbers for different classes
    label_encode = {"class": {"normal":0, "supraventricular ectopic":1, "ventricular ectopic":2, "fusion":3, "unknown":4}}

    # Use .replace to change the different classes into numbers
    df_labelled.replace(label_encode,inplace=True)
    return df_labelled

x_values = df[['t1','t2','t3','t4','t5','t6','t7','t8','t9','t10','t11','t12','t13','t14','t15','t16','t17','t18','t19','t20','t21','t22','t23','t24','t25','t26','t27','t28','t29','t30','t31','t32','t33','t34','t35','t36','t37','t38','t39','t40','t41','t42','t43','t44','t45','t46','t47','t48','t49','t50','t51','t52','t53','t54','t55','t56','t57','t58','t59','t60','t61','t62','t63','t64','t65','t66','t67','t68','t69','t70','t71','t72','t73','t74','t75','t76','t77','t78','t79','t80','t81','t82','t83','t84','t85','t86','t87','t88','t89','t90','t91','t92','t93','t94','t95','t96','t97','t98','t99','t100','t101','t102','t103','t104','t105','t106','t107','t108','t109','t110','t111','t112','t113','t114','t115','t116','t117','t118','t119','t120','t121','t122','t123','t124','t125','t126','t127','t128','t129','t130','t131','t132','t133','t134','t135','t136','t137','t138','t139','t140','t141','t142','t143','t144','t145','t146','t147','t148','t149','t150','t151','t152','t153','t154','t155','t156','t157','t158','t159','t160','t161','t162','t163','t164','t165','t166','t167','t168','t169','t170','t171','t172','t173','t174','t175','t176','t177','t178','t179','t180','t181','t182','t183','t184','t185','t186','t187'
]]
y_values = df['class']

plt.plot(df.iloc[0,:186]) #normal



plt.plot(df.iloc[72472,:186]) #supraventricular ectopic

plt.plot(df.iloc[74695,:186]) #ventricular eactopic

plt.plot(df.iloc[80483,:186]) #fusion

plt.plot(df.iloc[81124,:186]) #unknown

x_train, x_test, y_train, y_testXgBoost = train_test_split(x_values,y_values,test_size=0.3,random_state=10)
scaler = StandardScaler()
x_train_scale = scaler.fit_transform(x_train)
x_test_scale = scaler.transform(x_test)

#Train a XgBoost algorithm with the dataset.

gb_clf = XGBClassifier(learning_rate=0.3, n_estimator=100, subsample=1.0)
gb_clf.fit(x_train, y_train)

y_pred = gb_clf.predict(x_test)

from sklearn.metrics import confusion_matrix  
matrix = (confusion_matrix(y_testXgBoost, y_pred))  
print(matrix)
benar = (matrix[0,0]+matrix[1,1]+matrix[2,2]+matrix[3,3]+matrix[4,4])
Total = (matrix[0,0]+matrix[0,1]+matrix[0,2]+matrix[0,3]+matrix[0,4]
         +matrix[1,0]+matrix[1,1]+matrix[1,2]+matrix[1,3]+matrix[1,4]
         +matrix[2,0]+matrix[2,1]+matrix[2,2]+matrix[2,3]+matrix[2,4]
         +matrix[3,0]+matrix[3,1]+matrix[3,2]+matrix[3,3]+matrix[3,4]
         +matrix[4,0]+matrix[4,1]+matrix[4,2]+matrix[4,3]+matrix[4,4])
print(benar)
print(Total)


akurasi = ((matrix[0,0]+matrix[1,1]+matrix[2,2]+matrix[3,3]+matrix[4,4])/
           (matrix[0,0]+matrix[0,1]+matrix[0,2]+matrix[0,3]+matrix[0,4]+matrix[1,0]
            +matrix[1,1]+matrix[1,2]+matrix[1,3]+matrix[1,4]+matrix[2,0]+matrix[2,1]
            +matrix[2,2]+matrix[2,3]+matrix[2,4]+matrix[3,0]+matrix[3,1]+matrix[3,2]
            +matrix[3,3]+matrix[3,4]+matrix[4,0]+matrix[4,1]+matrix[4,2]+matrix[4,3]
            +matrix[4,4])*100)
print('Akurasi = ',akurasi,'%')

normalpredict = pd.read_csv("drive/MyDrive/Dataset/ECG/predict normal2.csv")
Xgboost = XGBClassifier()

# Extract out the x values and y values. x will be sepal_length and y will be classes
x = df[['t1','t2','t3','t4','t5','t6','t7','t8','t9','t10','t11','t12','t13',
        't14','t15','t16','t17','t18','t19','t20','t21','t22','t23','t24','t25',
        't26','t27','t28','t29','t30','t31','t32','t33','t34','t35','t36','t37',
        't38','t39','t40','t41','t42','t43','t44','t45','t46','t47','t48','t49',
        't50','t51','t52','t53','t54','t55','t56','t57','t58','t59','t60','t61',
        't62','t63','t64','t65','t66','t67','t68','t69','t70','t71','t72','t73',
        't74','t75','t76','t77','t78','t79','t80','t81','t82','t83','t84','t85',
        't86','t87','t88','t89','t90','t91','t92','t93','t94','t95','t96','t97',
        't98','t99','t100','t101','t102','t103','t104','t105','t106','t107','t108',
        't109','t110','t111','t112','t113','t114','t115','t116','t117','t118','t119',
        't120','t121','t122','t123','t124','t125','t126','t127','t128','t129','t130',
        't131','t132','t133','t134','t135','t136','t137','t138','t139','t140','t141',
        't142','t143','t144','t145','t146','t147','t148','t149','t150','t151','t152',
        't153','t154','t155','t156','t157','t158','t159','t160','t161','t162','t163',
        't164','t165','t166','t167','t168','t169','t170','t171','t172','t173','t174',
        't175','t176','t177','t178','t179','t180','t181','t182','t183','t184','t185','t186','t187'
]]
y = df['class']

Xgboost = Xgboost.fit(x,y)

test = normalpredict
predictXGB = Xgboost.predict(test)

print(predictXGB)

SEpredict = pd.read_csv("drive/MyDrive/Dataset/ECG/predict supraventricular ectopic2.csv")

Xgboost = XGBClassifier()

# Extract out the x values and y values. x will be sepal_length and y will be classes
x2 = df[['t1','t2','t3','t4','t5','t6','t7','t8','t9','t10','t11','t12','t13','t14',
         't15','t16','t17','t18','t19','t20','t21','t22','t23','t24','t25','t26','t27',
         't28','t29','t30','t31','t32','t33','t34','t35','t36','t37','t38','t39','t40',
         't41','t42','t43','t44','t45','t46','t47','t48','t49','t50','t51','t52','t53',
         't54','t55','t56','t57','t58','t59','t60','t61','t62','t63','t64','t65','t66',
         't67','t68','t69','t70','t71','t72','t73','t74','t75','t76','t77','t78','t79',
         't80','t81','t82','t83','t84','t85','t86','t87','t88','t89','t90','t91','t92',
         't93','t94','t95','t96','t97','t98','t99','t100','t101','t102','t103','t104',
         't105','t106','t107','t108','t109','t110','t111','t112','t113','t114','t115',
         't116','t117','t118','t119','t120','t121','t122','t123','t124','t125','t126',
         't127','t128','t129','t130','t131','t132','t133','t134','t135','t136','t137',
         't138','t139','t140','t141','t142','t143','t144','t145','t146','t147','t148',
         't149','t150','t151','t152','t153','t154','t155','t156','t157','t158','t159',
         't160','t161','t162','t163','t164','t165','t166','t167','t168','t169','t170',
         't171','t172','t173','t174','t175','t176','t177','t178','t179','t180','t181',
         't182','t183','t184','t185','t186','t187'
]]
y2 = df['class']

# Train KNN using the x and y values. This is done through the .fit method.
Xgboost = Xgboost.fit(x2,y2)

test = SEpredict
predictXGBSE = Xgboost.predict(test)

print(predictXGBSE)

VEpredict = pd.read_csv("drive/MyDrive/Dataset/ECG/predict ventricular ectopic2.csv")

Xgboost = XGBClassifier()

# Extract out the x values and y values. x will be sepal_length and y will be classes
x3 = df[['t1','t2','t3','t4','t5','t6','t7','t8','t9','t10','t11','t12','t13','t14',
        't15','t16','t17','t18','t19','t20','t21','t22','t23','t24','t25','t26','t27',
        't28','t29','t30','t31','t32','t33','t34','t35','t36','t37','t38','t39','t40',
        't41','t42','t43','t44','t45','t46','t47','t48','t49','t50','t51','t52','t53',
        't54','t55','t56','t57','t58','t59','t60','t61','t62','t63','t64','t65','t66',
        't67','t68','t69','t70','t71','t72','t73','t74','t75','t76','t77','t78','t79',
        't80','t81','t82','t83','t84','t85','t86','t87','t88','t89','t90','t91','t92',
        't93','t94','t95','t96','t97','t98','t99','t100','t101','t102','t103','t104',
        't105','t106','t107','t108','t109','t110','t111','t112','t113','t114','t115',
        't116','t117','t118','t119','t120','t121','t122','t123','t124','t125','t126',
        't127','t128','t129','t130','t131','t132','t133','t134','t135','t136','t137',
        't138','t139','t140','t141','t142','t143','t144','t145','t146','t147','t148',
        't149','t150','t151','t152','t153','t154','t155','t156','t157','t158','t159',
        't160','t161','t162','t163','t164','t165','t166','t167','t168','t169','t170',
        't171','t172','t173','t174','t175','t176','t177','t178','t179','t180','t181',
        't182','t183','t184','t185','t186','t187'
]]
y3 = df['class']

# Train KNN using the x and y values. This is done through the .fit method.
Xgboost = Xgboost.fit(x3,y3)

test = VEpredict
predictXGBVE = Xgboost.predict(test)

print(predictXGBVE)

fusionpredict = pd.read_csv("drive/MyDrive/Dataset/ECG/predict fusion2.csv")

Xgboost = XGBClassifier()

# Extract out the x values and y values. x will be sepal_length and y will be classes
x4 = df[['t1','t2','t3','t4','t5','t6','t7','t8','t9','t10','t11','t12','t13','t14',
        't15','t16','t17','t18','t19','t20','t21','t22','t23','t24','t25','t26','t27',
        't28','t29','t30','t31','t32','t33','t34','t35','t36','t37','t38','t39','t40',
        't41','t42','t43','t44','t45','t46','t47','t48','t49','t50','t51','t52','t53',
        't54','t55','t56','t57','t58','t59','t60','t61','t62','t63','t64','t65','t66',
        't67','t68','t69','t70','t71','t72','t73','t74','t75','t76','t77','t78','t79',
        't80','t81','t82','t83','t84','t85','t86','t87','t88','t89','t90','t91','t92',
        't93','t94','t95','t96','t97','t98','t99','t100','t101','t102','t103','t104',
        't105','t106','t107','t108','t109','t110','t111','t112','t113','t114','t115',
        't116','t117','t118','t119','t120','t121','t122','t123','t124','t125','t126',
        't127','t128','t129','t130','t131','t132','t133','t134','t135','t136','t137',
        't138','t139','t140','t141','t142','t143','t144','t145','t146','t147','t148',
        't149','t150','t151','t152','t153','t154','t155','t156','t157','t158','t159',
        't160','t161','t162','t163','t164','t165','t166','t167','t168','t169','t170',
        't171','t172','t173','t174','t175','t176','t177','t178','t179','t180','t181',
        't182','t183','t184','t185','t186','t187'
]]
y4 = df['class']


Xgboost = Xgboost.fit(x4,y4)

test = fusionpredict
predictXGBF = Xgboost.predict(test)

print(predictXGBF)

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
Paket = ['Normal','Supraventricular Ectopic','Ventricular Ectopic','Fusion','Tidak Dikenal']
data = [72471,2223,5788,641,6431]
ax.pie(data, labels = Paket, autopct='%1.2f%%')
plt.title('Total Data Elektrokardiogram')
plt.show()
